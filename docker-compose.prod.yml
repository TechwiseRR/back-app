services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: laravel-app:prd
    container_name: laravel-app-prd
    restart: unless-stopped
    working_dir: /var/www
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      LOG_CHANNEL: stderr
      DB_CONNECTION: pgsql
      DB_HOST: db
      DB_PORT: "5432"
      DB_DATABASE: laravel
      DB_USERNAME: laravel
      DB_PASSWORD: ${DB_PASSWORD}   # <- secret
      APP_KEY: ${APP_KEY}           # <- secret
      JWT_SECRET: ${JWT_SECRET}     # <- secret
      # (opcache activé si géré dans ton image PHP)
      PHP_OPCACHE_ENABLE: "1"
      PHP_OPCACHE_ENABLE_CLI: "1"
      PHP_OPCACHE_VALIDATE_TIMESTAMPS: "0"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "php -r 'exit(function_exists(\"opcache_get_status\")?0:1);'"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      # code “baked” dans l’image, partagé à Nginx via un volume nommé
      - app_code:/var/www:rw
    networks:
      - backend

  web:
    image: nginx:alpine
    container_name: laravel-nginx-prd
    restart: unless-stopped
    depends_on:
      app:
        condition: service_started
    expose:
      - "80"   # visible uniquement sur le réseau interne
    volumes:
      - app_code:/var/www:ro
      - ./docker/nginx:/etc/nginx/conf.d:ro  # <-- on monte le DOSSIER
    networks:
      - backend

  db:
    image: postgres:16-alpine
    container_name: laravel-postgres-prd
    restart: unless-stopped
    environment:
      POSTGRES_DB: laravel
      POSTGRES_USER: laravel
      POSTGRES_PASSWORD: ${DB_PASSWORD}   # <- secret
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-laravel} -d ${POSTGRES_DB:-laravel} || pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s
    networks:
      - backend

# (optionnel) service one-shot pour lancer les migrations au déploiement
  migrate:
    image: laravel-app:prd
    container_name: laravel-migrate-prd
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
      app:
        condition: service_started
    working_dir: /var/www
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      DB_CONNECTION: pgsql
      DB_HOST: db
      DB_PORT: "5432"
      DB_DATABASE: laravel
      DB_USERNAME: laravel
      DB_PASSWORD: ${DB_PASSWORD}
      APP_KEY: ${APP_KEY}
    command: ["php", "artisan", "migrate", "--force"]
    networks:
      - backend

networks:
  backend:

volumes:
  pgdata:
  app_code:
